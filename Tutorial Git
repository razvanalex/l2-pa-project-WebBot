------------------------------------------------------------------------------
                                Git tutorial
------------------------------------------------------------------------------

Definitions:
a commit  -> records changes to the repository
to commit -> the action of recording (uploading) the current state of a 
             repository to a server (e.g. github, gitlab, etc)
stage (a file/multiple files) -> prepare the local file(s) for a commit. 


How to use commit files?
Suppose that we have an existing repository, we've changed some files and now
we want to upload the changes to github. Before uploading the changes, make 
sure that there aren't junk files, to keep our repository clean.
First, open a terminal, go to the folder that contains the copy of your 
repository and enter the following command:
    $ git status

This command will display the current state of your stage (all files that are 
changed or new, will be colored in red). Now, let's add files to stage area:
    $ git add *

This command will add all files from current directory in the stage area. Note 
that * can be changed with any file or path of a file (or bunch of files). Now, 
having our files staged, let's check if all is ok:
    $ git status

Now, you'll see some filenames that are green. This means that these files 
are ready to be uploaded. If you still see some files in red, you also may want 
to add them to current stage. Let's create a commit.
    $ git commit -m "My first commit"

In the previous command, -m means that next parameter will be the name of our 
commit (here: "My first commit"). Now, our commit is ready to be pushed 
(uploaded):
    $ git push origin branch_name

Now, the commit will be pushed onto branch named branch_name. Usually, the 
branch is master, but for tests/features/etc, you may use the name of that 
branch.


How to create a new branch and how to switch to it?
A branch is a part of your repository, isolated from master or other branches,
where you can make changes, without affecting other branches. It may be used 
for new features, testing, new apps etc.

Let's create a new branch:
    $ git checkout -b my_new_branch

Change working branch:
    $ git checkout my_new_branch

Push the branch on github:
    $ git push origin my_new_branch

You can see all branches created by using:
    $ git branch

Once you have created the branch, you can commit files, as described above.
Make sure that you commit files on right branch (check current branch before 
any commit).


Adding an existing project to GitHub using the command line
1. Open Terminal.
2. Change the current working directory to your local project.
3. Initialize the local directory as a Git repository:
    $ git init

4. Add the files in your new local repository. This stages them for the first 
commit.
    $ git add .

5. Commit the files that you've staged in your local repository.
    $ git commit -m "First commit"

6. In Terminal, add the URL for the remote repository where your local repository 
will be pushed.
    $ git remote add origin remote_repository_URL

7. Push the changes in your local repository to GitHub. (Create a new branch, or
use an existing one)



Reference:
[1] https://github.com/Kunena/Kunena-Forum/wiki/Create-a-new-branch-with-git-and-manage-branches
[2] https://help.github.com/articles/adding-an-existing-project-to-github-using-the-command-line/
